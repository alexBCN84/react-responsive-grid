'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forExt = exports.rejectNodeModules = undefined;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const _promisify = (fn, context) => (...args) => new Promise((resolve, reject) => {
  fn.call(context, ...args, (error, ok) => {
    if (error) reject(error);
    resolve(ok);
  });
});

const readdir = _promisify(_fs2.default.readdir, _fs2.default);
const stats = _promisify(_fs2.default.stat, _fs2.default);

const rejectNodeModules = exports.rejectNodeModules = (file, stats) => stats.isDirectory() && file.match(/node_modules/);

const acceptAll = () => true;

const forExt = exports.forExt = ext => file => {
  const match = file.match(new RegExp('\.' + ext + '$', 'i'));
  return !!match && match[0][0] === '.';
};

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (root, accept = acceptAll, reject = rejectNodeModules) {
    let walk = (() => {
      var _ref2 = _asyncToGenerator(function* (dir) {
        if (!_fs2.default.existsSync(dir)) {
          throw new Error(dir + ' does not exists');
        }

        const list = yield readdir(dir);
        const blockers = list.map((() => {
          var _ref3 = _asyncToGenerator(function* (file) {
            const fullpath = _path2.default.resolve(dir, file);
            const stat = yield stats(fullpath);

            if (reject(fullpath, stat)) {
              return;
            }

            if (stat.isDirectory()) {
              return walk(fullpath);
            }

            if (accept(fullpath, stat)) {
              files.push(fullpath);
            }
          });

          return function (_x3) {
            return _ref3.apply(this, arguments);
          };
        })());
        return Promise.all(blockers);
      });

      return function walk(_x2) {
        return _ref2.apply(this, arguments);
      };
    })();

    const files = [];

    yield walk(root);
    return files;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();