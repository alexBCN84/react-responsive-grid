"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _path = require("path");

var _utils = require("./utils");

// Babel v7 compat
var syntax;

try {
  syntax = require('babel-plugin-syntax-dynamic-import');
} catch (err) {
  try {
    syntax = require('@babel/plugin-syntax-dynamic-import');
  } catch (e) {
    throw new Error('react-imported-component babel plugin is requiring `babel-plugin-syntax-dynamic-import` or `@babel/plugin-syntax-dynamic-import` to work. Please add this dependency.');
  }
}

syntax = syntax.default || syntax;

var resolveImport = function resolveImport(importName) {
  var file = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  if (importName.charAt(0) === '.') {
    return (0, _path.relative)(process.cwd(), (0, _path.resolve)((0, _path.dirname)(file), importName));
  }

  return importName;
};

var templateOptions = {
  placeholderPattern: /^([A-Z0-9]+)([A-Z0-9_]+)$/
};

function _default(_ref) {
  var t = _ref.types,
      template = _ref.template;
  var headerTemplate = template("var importedWrapper = function(marker, realImport) { \n      if (typeof __deoptimization_sideEffect__ !== 'undefined') {\n        __deoptimization_sideEffect__(marker, realImport);\n      }\n      return realImport;\n  }", templateOptions);
  var importRegistration = template('importedWrapper(MARK, IMPORT)', templateOptions);
  var hasImports = {};
  var visitedNodes = new Map();
  return {
    inherits: syntax,
    visitor: {
      // using program to replace imports before "dynamic-import-node"
      // see: https://jamie.build/babel-plugin-ordering.html
      Program: {
        enter: function enter(programPath, _ref2) {
          var file = _ref2.file;
          programPath.traverse({
            Import: function Import(_ref3) {
              var parentPath = _ref3.parentPath;

              if (visitedNodes.has(parentPath.node)) {
                return;
              }

              var localFile = file.opts.filename;
              var newImport = parentPath.node;
              var importName = parentPath.get('arguments')[0].node.value;

              if (!importName) {
                return;
              }

              var requiredFileHash = (0, _utils.encipherImport)(resolveImport(importName, localFile));
              var replace = null;
              replace = importRegistration({
                MARK: t.stringLiteral("imported_".concat(requiredFileHash, "_component")),
                IMPORT: newImport
              });
              hasImports[localFile] = true;
              visitedNodes.set(newImport, true);
              parentPath.replaceWith(replace);
            }
          });
        },
        exit: function exit(_ref4, _ref5) {
          var node = _ref4.node;
          var file = _ref5.file;
          if (!hasImports[file.opts.filename]) return;
          node.body.unshift(headerTemplate());
        }
      }
    }
  };
}