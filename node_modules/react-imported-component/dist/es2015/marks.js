var LOADABLE_MARKS = {};
var USED_MARKS = {};
export var useMark = function useMark(stream, marks) {
  if (marks && marks.length) {
    if (!USED_MARKS[stream]) {
      USED_MARKS[stream] = {};
    }

    marks.forEach(function (a) {
      return USED_MARKS[stream][a] = true;
    });
  }
};
export var loadMark = function loadMark(markId, loadable) {
  if (!LOADABLE_MARKS[markId]) {
    LOADABLE_MARKS[markId] = [];
  }

  LOADABLE_MARKS[markId].push(loadable);
};
export var drainHydrateMarks = function drainHydrateMarks(stream) {
  if (stream === void 0) {
    stream = 0;
  }

  var used = Object.keys(USED_MARKS[stream] || {});
  delete USED_MARKS[stream];
  return used;
};
export var rehydrateMarks = function rehydrateMarks(marks) {
  if (marks === void 0) {
    marks = false;
  }

  var rehydrate = marks || global.___REACT_DEFERRED_COMPONENT_MARKS || [];
  return Promise.all(rehydrate.map(function (mark) {
    return LOADABLE_MARKS[mark];
  }).reduce(function (acc, loadable) {
    return [].concat(acc, loadable);
  }, []).filter(function (it) {
    return !!it;
  }).map(function (loadable) {
    return loadable.load();
  }));
};
export var printDrainHydrateMarks = function printDrainHydrateMarks(stream) {
  if (stream === void 0) {
    stream = 0;
  }

  return "<script>window.___REACT_DEFERRED_COMPONENT_MARKS=" + JSON.stringify(drainHydrateMarks(stream)) + ";/*stream " + stream + "*/</script>";
};