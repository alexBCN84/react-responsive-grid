import { relative, sep } from 'path';
import { readFile, writeFile } from 'fs';

try {
  require('babel-polyfill');
} catch (err) {
  try {
    require('@babel/polyfill');
  } catch (e) {
    throw Error('react-imported-component: scanImports is requiring babel-polyfill, or @babel/polyfill to work. Please add this dependency.');
  }
}
/* eslint-disable no-console */


export var promisify = function promisify(fn, context, noReject) {
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return new Promise(function (resolve, reject) {
      fn.call.apply(fn, [context].concat(args, [function (error, ok) {
        if (error) {
          if (noReject) {
            resolve(error);
          } else {
            reject(error);
          }
        }

        resolve(ok);
      }]));
    });
  };
};
export var normalizePath = function normalizePath(path) {
  return path.split(sep).join('/');
};
export var getRelative = function getRelative(from, to) {
  // force one unit paths
  var rel = normalizePath(relative(from, to));
  return rel[0] !== '.' ? './' + rel : rel;
};
export var getMatchString = function getMatchString(pattern, selected) {
  return function (str) {
    return (str.match(new RegExp(pattern, 'g')) || []).map(function (statement) {
      return statement.match(new RegExp(pattern, 'i'))[selected];
    });
  };
};
export var pReadFile = promisify(readFile);
export var pWriteFile = promisify(writeFile);
export var getFileContent = function getFileContent(file) {
  return pReadFile(file, 'utf8');
};