import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";

/*eslint no-console: "warn"*/
import scanDirectory from 'scan-directory';
import { extname, resolve, dirname, join } from 'path';
import { getFileContent, getMatchString, pWriteFile, normalizePath, getRelative } from "./shared";
var RESOLVE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.mjs'];

var trimImport = function trimImport(str) {
  return str.replace(/['"]/g, '');
};

var getImports = getMatchString("(['\"]?[\\w-/.]+['\"]?)\\)", 1);
var getComment = getMatchString(/\/\*.*\*\//, 0);

var clearComment = function clearComment(str) {
  return str.replace("webpackPrefetch: true", '').replace("webpackPreload: true", '');
};

var getImportString = function getImportString(pattern, selected) {
  return function (str) {
    return getMatchString(pattern, selected)(str).map(function (statement) {
      return {
        name: trimImport(getImports(statement + ')')[0] || ''),
        comment: clearComment(getComment(statement)[0] || '')
      };
    });
  };
};

export var getDynamicImports = getImportString("import[\\s]?\\((([^)])+['\"]?)\\)", 1);

var mapImports = function mapImports(file, imports) {
  return imports.map(function (dep) {
    var name = dep.name,
        comment = dep.comment;

    if (name && name.charAt(0) === '.') {
      return {
        name: resolve(dirname(file), name),
        comment: comment
      };
    }

    return dep;
  });
};

var rejectSystem = function rejectSystem(file, stats) {
  return stats.isDirectory() && file.match(/node_modules/) || file.match(/(\/\.\w+)/);
};

export var remapImports = function remapImports(data, root, targetDir, getRelative, imports) {
  return data.map(function (_ref) {
    var file = _ref.file,
        content = _ref.content;
    return mapImports(file, getDynamicImports(content));
  }).forEach(function (importBlock) {
    return importBlock.forEach(function (_ref2) {
      var name = _ref2.name,
          comment = _ref2.comment;
      imports[getRelative(root, name)] = "() => import(" + comment + "'" + getRelative(targetDir, name) + "')";
    });
  });
};

function scanTop(root, start, target) {
  function scan() {
    return _scan.apply(this, arguments);
  }

  function _scan() {
    _scan = _asyncToGenerator(
    /*#__PURE__*/
    _regeneratorRuntime.mark(function _callee2() {
      var files, data, imports, targetDir;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              console.log('scanning', start, 'for imports...');
              _context2.next = 3;
              return scanDirectory(join(root, start), undefined, rejectSystem);

            case 3:
              _context2.t0 = function (name) {
                return normalizePath(name).indexOf(target) === -1;
              };

              _context2.t1 = function (name) {
                return RESOLVE_EXTENSIONS.indexOf(extname(name)) >= 0;
              };

              files = _context2.sent.filter(_context2.t0).filter(_context2.t1);
              _context2.next = 8;
              return Promise.all(files.map(
              /*#__PURE__*/
              function () {
                var _ref3 = _asyncToGenerator(
                /*#__PURE__*/
                _regeneratorRuntime.mark(function _callee(file) {
                  var content;
                  return _regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                      switch (_context.prev = _context.next) {
                        case 0:
                          _context.next = 2;
                          return getFileContent(file);

                        case 2:
                          content = _context.sent;
                          return _context.abrupt("return", {
                            file: file,
                            content: content
                          });

                        case 4:
                        case "end":
                          return _context.stop();
                      }
                    }
                  }, _callee, this);
                }));

                return function (_x) {
                  return _ref3.apply(this, arguments);
                };
              }()));

            case 8:
              data = _context2.sent;
              imports = {};
              targetDir = resolve(root, dirname(target));
              remapImports(data, root, targetDir, getRelative, imports);
              console.log(Object.keys(imports).length + " imports found, saving to " + target);
              pWriteFile(target, "\n    /* eslint-disable */\n    /* tslint:disable */\n     \n    import {assignImportedComponents} from 'react-imported-component';\n    \n    const applicationImports = [\n" + Object.keys(imports).map(function (key) {
                return "      " + imports[key] + ",";
              }).sort().join('\n') + "\n    ];\n    \n    assignImportedComponents(applicationImports);\n    export default applicationImports;");

            case 14:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));
    return _scan.apply(this, arguments);
  }

  return scan();
}

if (!process.argv[3]) {
  console.log('usage: imported-components sourceRoot targetFile');
  console.log('example: imported-components src src/importedComponents.js');
} else {
  scanTop(process.cwd(), process.argv[2], process.argv[3]);
}