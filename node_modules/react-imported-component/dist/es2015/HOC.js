import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import React from 'react';
import HotComponentLoader from './Component';
import toLoadable from './loadable';
/**
 *
 * @param {Function} loaderFunction - () => import('a'), or () => require('b')
 * @param {Object} [options]
 * @param {React.Component} [options.LoadingComponent]
 * @param {React.Component} [options.ErrorComponent]
 * @param {Function} [options.exportPicker] - default behaviour - picks default export
 * @param {Function} [options.onError] - error handler. Will consume the real error.
 * @param {Function} [options.async] - enable React 16+ suspense.
 */

var loader = function loader(loaderFunction, options) {
  if (options === void 0) {
    options = {};
  }

  var loadable = toLoadable(loaderFunction, !options.noAutoImport);
  /* eslint-disable react/display-name, react/prop-types */

  var ImportedComponent = function ImportedComponent(_ref) {
    var _ref$importedProps = _ref.importedProps,
        importedProps = _ref$importedProps === void 0 ? {} : _ref$importedProps,
        props = _objectWithoutPropertiesLoose(_ref, ["importedProps"]);

    return React.createElement(HotComponentLoader, _extends({
      loadable: loadable,
      LoadingComponent: options.LoadingComponent,
      ErrorComponent: options.ErrorComponent,
      exportPicker: options.exportPicker,
      onError: options.onError,
      render: options.render,
      async: options.async,
      forwardProps: props || {}
    }, importedProps));
  };

  var Imported = React.forwardRef ? React.forwardRef(function (_ref2, ref) {
    var _ref2$importedProps = _ref2.importedProps,
        importedProps = _ref2$importedProps === void 0 ? {} : _ref2$importedProps,
        props = _objectWithoutPropertiesLoose(_ref2, ["importedProps"]);

    return React.createElement(ImportedComponent, _extends({}, props, {
      importedProps: _extends({}, importedProps, {
        forwardRef: ref
      })
    }));
  }) : ImportedComponent;
  /* eslint-enable */

  Imported.preload = function () {
    loadable.load().catch(function () {
      return {};
    });
    return loadable.resolution;
  };

  Imported.done = loadable.resolution;
  return Imported;
};

export var lazy = function lazy(loaderFunction) {
  return loader(loaderFunction, {
    async: true
  });
};
export default loader;